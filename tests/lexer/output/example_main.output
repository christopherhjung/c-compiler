example_main.input:1:1: keyword int
example_main.input:1:5: identifier main
example_main.input:1:9: punctuator (
example_main.input:1:10: punctuator )
example_main.input:2:1: punctuator {
example_main.input:3:5: keyword char
example_main.input:3:10: identifier name
example_main.input:3:14: punctuator [
example_main.input:3:15: constant 50
example_main.input:3:17: punctuator ]
example_main.input:3:18: punctuator ;
example_main.input:4:5: keyword int
example_main.input:4:9: identifier marks
example_main.input:4:14: punctuator ,
example_main.input:4:16: identifier i
example_main.input:4:17: punctuator ,
example_main.input:4:19: identifier num
example_main.input:4:22: punctuator ;
example_main.input:6:5: identifier printf
example_main.input:6:11: punctuator (
example_main.input:6:12: string-literal "Enter number of students:\" "
example_main.input:6:42: punctuator )
example_main.input:6:43: punctuator ;
example_main.input:7:5: identifier scanf
example_main.input:7:10: punctuator (
example_main.input:7:11: string-literal "%d"
example_main.input:7:15: punctuator ,
example_main.input:7:17: punctuator &
example_main.input:7:18: identifier num
example_main.input:7:21: punctuator )
example_main.input:7:22: punctuator ;
example_main.input:9:5: keyword char
example_main.input:9:10: identifier cha
example_main.input:9:14: punctuator =
example_main.input:9:16: constant 't'
example_main.input:9:19: punctuator ;
example_main.input:10:5: keyword char
example_main.input:10:10: identifier cha2
example_main.input:10:15: punctuator =
example_main.input:10:17: constant '\''
example_main.input:10:21: punctuator ;
example_main.input:12:5: identifier FILE
example_main.input:12:10: punctuator *
example_main.input:12:11: identifier fptr
example_main.input:12:15: punctuator ;
example_main.input:13:5: identifier fptr
example_main.input:13:10: punctuator =
example_main.input:13:12: punctuator (
example_main.input:13:13: identifier fopen
example_main.input:13:18: punctuator (
example_main.input:13:19: string-literal "C:\\student.txt"
example_main.input:13:36: punctuator ,
example_main.input:13:38: string-literal "w"
example_main.input:13:41: punctuator )
example_main.input:13:42: punctuator )
example_main.input:13:43: punctuator ;
example_main.input:14:5: keyword if
example_main.input:14:7: punctuator (
example_main.input:14:8: identifier fptr
example_main.input:14:13: punctuator ==
example_main.input:14:16: identifier NULL
example_main.input:14:20: punctuator )
example_main.input:15:5: punctuator {
example_main.input:17:5: punctuator }
example_main.input:19:5: keyword for
example_main.input:19:8: punctuator (
example_main.input:19:9: identifier i
example_main.input:19:11: punctuator =
example_main.input:19:13: constant 0
example_main.input:19:14: punctuator ;
example_main.input:19:16: identifier i
example_main.input:19:18: punctuator <
example_main.input:19:20: identifier num
example_main.input:19:23: punctuator ;
example_main.input:19:25: punctuator ++
example_main.input:19:27: identifier i
example_main.input:19:28: punctuator )
example_main.input:20:5: punctuator {
example_main.input:21:9: punctuator ->
example_main.input:22:9: identifier printf
example_main.input:22:15: punctuator (
example_main.input:22:16: string-literal "For student%d\nEnter name: \\ "
example_main.input:22:48: punctuator ,
example_main.input:22:50: identifier i
example_main.input:22:51: punctuator +
example_main.input:22:52: constant 1
example_main.input:22:53: punctuator )
example_main.input:22:54: punctuator ;
example_main.input:23:9: identifier scanf
example_main.input:23:14: punctuator (
example_main.input:23:15: string-literal "%s"
example_main.input:23:19: punctuator ,
example_main.input:23:21: identifier name
example_main.input:23:25: punctuator )
example_main.input:23:26: punctuator ;
example_main.input:25:9: identifier printf
example_main.input:25:15: punctuator (
example_main.input:25:16: string-literal "Enter marks: "
example_main.input:25:31: punctuator )
example_main.input:25:32: punctuator ;
example_main.input:26:9: identifier scanf
example_main.input:26:14: punctuator (
example_main.input:26:15: string-literal "%d"
example_main.input:26:19: punctuator ,
example_main.input:26:21: punctuator &
example_main.input:26:22: identifier marks
example_main.input:26:27: punctuator )
example_main.input:26:28: punctuator ;
example_main.input:28:9: identifier fprintf
example_main.input:28:16: punctuator (
example_main.input:28:17: identifier fptr
example_main.input:28:21: punctuator ,
example_main.input:28:22: string-literal "\nName: %s \nMarks=%d \n"
example_main.input:28:48: punctuator ,
example_main.input:28:50: identifier name
example_main.input:28:54: punctuator ,
example_main.input:28:56: identifier marks
example_main.input:28:61: punctuator )
example_main.input:28:62: punctuator ;
example_main.input:29:5: punctuator }
example_main.input:31:5: identifier fclose
example_main.input:31:11: punctuator (
example_main.input:31:12: identifier fptr
example_main.input:31:16: punctuator )
example_main.input:31:17: punctuator ;
example_main.input:32:5: keyword return
example_main.input:32:12: constant 0
example_main.input:32:13: punctuator ;
example_main.input:33:1: punctuator }