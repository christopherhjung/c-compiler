Root: CompilationUnit;

PrimaryExpression
    :   TypedefName
    |   'constant'
    |   'string-literal'+
    |   '(' Expression ')'
    ;

PostfixExpression
    :   PrimaryExpression
    |   PostfixExpression '[' Expression ']'
    |   PostfixExpression '(' ArgumentExpressionList? ')'
    |   PostfixExpression '.' 'identifiers'
    |   PostfixExpression '->' 'identifiers'
    |   PostfixExpression '++'
    |   PostfixExpression '--'
    |   '(' TypeName ')' '{' InitializerList '}'
    |   '(' TypeName ')' '{' InitializerList ',' '}'
    ;

ArgumentExpressionList
    :   AssignmentExpression
    |   ArgumentExpressionList ',' AssignmentExpression
    ;

UnaryExpression
    :   PostfixExpression
    |   '++' UnaryExpression
    |   '--' UnaryExpression
    |   UnaryOperator CastExpression
    |   'sizeof' UnaryExpression
    |   'sizeof' '(' TypeName ')'
    |   '&&' 'identifiers' // 'gcC' Extension Address Of Label
    ;

UnaryOperator
    :   '&' | '*' | '+' | '-' | '~' | '!'
    ;

CastExpression
    :   '(' TypeName ')' CastExpression
    |   UnaryExpression
    |   'digitSequence' // For
    ;

MultiplicativeExpression
    :   CastExpression
    |   MultiplicativeExpression '*' CastExpression
    |   MultiplicativeExpression '/' CastExpression
    |   MultiplicativeExpression '%' CastExpression
    ;

AdditiveExpression
    :   MultiplicativeExpression
    |   AdditiveExpression '+' MultiplicativeExpression
    |   AdditiveExpression '-' MultiplicativeExpression
    ;

ShiftExpression
    :   AdditiveExpression
    |   ShiftExpression '<<' AdditiveExpression
    |   ShiftExpression '>>' AdditiveExpression
    ;

RelationalExpression
    :   ShiftExpression
    |   RelationalExpression '<' ShiftExpression
    |   RelationalExpression '>' ShiftExpression
    |   RelationalExpression '<=' ShiftExpression
    |   RelationalExpression '>=' ShiftExpression
    ;

EqualityExpression
    :   RelationalExpression
    |   EqualityExpression '==' RelationalExpression
    |   EqualityExpression '!=' RelationalExpression
    ;

AndExpression
    :   EqualityExpression
    |   AndExpression '&' EqualityExpression
    ;

ExclusiveOrExpression
    :   AndExpression
    |   ExclusiveOrExpression '^' AndExpression
    ;

InclusiveOrExpression
    :   ExclusiveOrExpression
    |   InclusiveOrExpression '|' ExclusiveOrExpression
    ;

LogicalAndExpression
    :   InclusiveOrExpression
    |   LogicalAndExpression '&&' InclusiveOrExpression
    ;

LogicalOrExpression
    :   LogicalAndExpression
    |   LogicalOrExpression '||' LogicalAndExpression
    ;

ConditionalExpression
    :   LogicalOrExpression ('?' Expression ':' ConditionalExpression)?
    ;

AssignmentExpression
    :   ConditionalExpression
    |   UnaryExpression AssignmentOperator AssignmentExpression
    |   'digitSequence' // For
    ;

AssignmentOperator
    :   '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '&=' | '^=' | '|='
    ;

Expression
    :   AssignmentExpression
    |   Expression ',' AssignmentExpression
    ;

ConstantExpression
    :   ConditionalExpression
    ;

DirectDeclarator
    :   DeclarationSpecifiers InitDeclaratorList ';'
	| 	DeclarationSpecifiers ';'
    ;

DeclarationSpecifiers
    :   DeclarationSpecifier+
    ;

DeclarationSpecifiers2
    :   DeclarationSpecifier+
    ;

DeclarationSpecifier
    :   StorageClassSpecifier
    |   TypeSpecifier
    |   TypeQualifier
    |   FunctionSpecifier
    ;

InitDeclaratorList
    :   InitDeclarator
    |   InitDeclaratorList ',' InitDeclarator
    ;

InitDeclarator
    :   Declarator
    |   Declarator '=' Initializer
    ;

StorageClassSpecifier
    :   'typedef'
    |   'extern'
    |   'static'
    |   'auto'
    |   'register'
    ;

TypeSpecifier
    :   ('void'
    |   'char'
    |   'short'
    |   'int'
    |   'long'
    |   'float'
    |   'double'
    |   'signed'
    |   'unsigned')
    |   StructOrUnionSpecifier
    |   EnumSpecifier
    |   TypedefName
    |   TypeSpecifier
    ;

StructOrUnionSpecifier
    :   StructOrUnion 'identifiers'? '{' StructDeclarationList '}'
    |   StructOrUnion 'identifiers'
    ;

StructOrUnion
    :   'struct'
    |   'union'
    ;

StructDeclarationList
    :   StructDeclaration
    |   StructDeclarationList StructDeclaration
    ;

StructDeclaration
    :   SpecifierQualifierList StructDeclaratorList? ';'
    ;

SpecifierQualifierList
    :   TypeSpecifier SpecifierQualifierList?
    |   TypeQualifier SpecifierQualifierList?
    ;

StructDeclaratorList
    :   StructDeclarator
    |   StructDeclaratorList ',' StructDeclarator
    ;

StructDeclarator
    :   Declarator
    |   Declarator? ':' ConstantExpression
    ;

EnumSpecifier
    :   'enum' 'identifiers'? '{' EnumeratorList '}'
    |   'enum' 'identifiers'? '{' EnumeratorList ',' '}'
    |   'enum' 'identifiers'
    ;

EnumeratorList
    :   Enumerator
    |   EnumeratorList ',' Enumerator
    ;

Enumerator
    :   EnumerationConstant
    |   EnumerationConstant '=' ConstantExpression
    ;

EnumerationConstant
    :   'identifiers'
    ;

TypeQualifier
    :   'const'
    |   'restrict'
    |   'volatile'
    ;

FunctionSpecifier
    :   GccAttributeSpecifier
    ;

Declarator
    :   Pointer? DirectDeclarator
    ;

DirectDeclarator
    :   TypedefName
    |   '(' Declarator ')'
    |   DirectDeclarator '[' TypeQualifierList? AssignmentExpression? ']'
    |   DirectDeclarator '[' 'static' TypeQualifierList? AssignmentExpression ']'
    |   DirectDeclarator '[' TypeQualifierList 'static' AssignmentExpression ']'
    |   DirectDeclarator '[' TypeQualifierList? '*' ']'
    |   DirectDeclarator '(' ParameterTypeList ')'
    |   DirectDeclarator '(' IdentifierList? ')'
    |   'identifiers' ':' 'digitSequence'  // Bit Field
    |   '(' TypeSpecifier? Pointer DirectDeclarator ')' // Function Pointer Like: (__cdecl *f)
    ;



Pointer
    :   '*' TypeQualifierList?
    |   '*' TypeQualifierList? Pointer
    |   '^' TypeQualifierList? // 'blocks' Language Extension
    |   '^' TypeQualifierList? Pointer // 'blocks' Language Extension
    ;

TypeQualifierList
    :   TypeQualifier
    |   TypeQualifierList TypeQualifier
    ;

ParameterTypeList
    :   ParameterList
    |   ParameterList ',' '...'
    ;

ParameterList
    :   ParameterDeclaration
    |   ParameterList ',' ParameterDeclaration
    ;

ParameterDeclaration
    :   DeclarationSpecifiers Declarator
    |   DeclarationSpecifiers2 AbstractDeclarator?
    ;

IdentifierList
    :   'identifiers'
    |   IdentifierList ',' 'identifiers'
    ;

TypeName
    :   SpecifierQualifierList AbstractDeclarator?
    ;

AbstractDeclarator
    :   Pointer
    |   Pointer? DirectAbstractDeclarator
    ;

DirectAbstractDeclarator
    :   '(' AbstractDeclarator ')'
    |   '[' TypeQualifierList? AssignmentExpression? ']'
    |   '[' 'static' TypeQualifierList? AssignmentExpression ']'
    |   '[' TypeQualifierList 'static' AssignmentExpression ']'
    |   '[' '*' ']'
    |   '(' ParameterTypeList? ')'
    |   DirectAbstractDeclarator '[' TypeQualifierList? AssignmentExpression? ']'
    |   DirectAbstractDeclarator '[' 'static' TypeQualifierList? AssignmentExpression ']'
    |   DirectAbstractDeclarator '[' TypeQualifierList 'static' AssignmentExpression ']'
    |   DirectAbstractDeclarator '[' '*' ']'
    |   DirectAbstractDeclarator '(' ParameterTypeList? ')'
    ;

TypedefName
    :   'identifiers'
    ;

Initializer
    :   AssignmentExpression
    |   '{' InitializerList '}'
    |   '{' InitializerList ',' '}'
    ;

InitializerList
    :   Designation? Initializer
    |   InitializerList ',' Designation? Initializer
    ;

Designation
    :   DesignatorList '='
    ;

DesignatorList
    :   Designator
    |   DesignatorList Designator
    ;

Designator
    :   '[' ConstantExpression ']'
    |   '.' 'identifiers'
    ;


Statement
    :   /*LabeledStatement
    |   */CompoundStatement
    |   ExpressionStatement
    |   SelectionStatement
    |   IterationStatement
    |   JumpStatement
    ;

LabeledStatement
    :   'identifiers' ':' Statement
    |   'case' ConstantExpression ':' Statement
    |   'default' ':' Statement
    ;

CompoundStatement
    :   '{' BlockItemList? '}'
    ;

BlockItemList
    :   BlockItem
    |   BlockItemList BlockItem
    ;

BlockItem
    :   Statement
    |   DirectDeclarator
    ;

ExpressionStatement
    :   Expression? ';'
    ;

SelectionStatement
    :   'if' '(' Expression ')' Statement ('else' Statement)?
    |   'switch' '(' Expression ')' Statement
    ;

IterationStatement
    :   'while' '(' Expression ')' Statement
    |   'do' Statement 'while' '(' Expression ')' ';'
    |   'for' '(' ForCondition ')' Statement
    ;

ForCondition
	:   ForDeclaration ';' ForExpression? ';' ForExpression?
	|   Expression? ';' ForExpression? ';' ForExpression?
	;

ForDeclaration
    :   DeclarationSpecifiers InitDeclaratorList
	| 	DeclarationSpecifiers
    ;

ForExpression
    :   AssignmentExpression
    |   ForExpression ',' AssignmentExpression
    ;

JumpStatement
    :   'goto' 'identifiers' ';'
    |   'continue' ';'
    |   'break' ';'
    |   'return' Expression? ';'
    |   'goto' UnaryExpression ';' // 'gcC' Extension
    ;

CompilationUnit
    :   TranslationUnit?
    ;

TranslationUnit
    :   ExternalDeclaration
    |   TranslationUnit ExternalDeclaration
    ;

ExternalDeclaration
    :   FunctionDefinition
    |   DirectDeclarator
    |   ';'
    ;

FunctionDefinition
    :   DeclarationSpecifiers? Declarator DeclarationList? CompoundStatement
    ;

DeclarationList
    :   DirectDeclarator
    |   DeclarationList DirectDeclarator
    ;