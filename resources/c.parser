root -> statement:method*
Method  -> returnType:type methodName:{word} ( declarations:declare[,] ) inner:block
Block -> { statements:MethodStatement* }
MethodStatement -> statement:if
MethodStatement -> statement:block
MethodStatement -> statement:while
MethodStatement -> statement:for
MethodStatement -> statement:forEach
MethodStatement -> statement:singleLineStatement ;
MethodStatement -> statement:return ;
MethodStatement -> statement:throw ;
return -> returnKeyword expression
singleLineStatement -> statement:assign
singleLineStatement -> statement:modifyAssign
singleLineStatement -> statement:declare
singleLineStatement -> statement:declareAssign
singleLineStatement -> statement:methodCall
singleLineStatement -> statement:newInstance
declareAssign -> varType:word varName:word = expression
declare -> varType:word varName:word
If -> if ( expression ) ifBranch:MethodStatement
If -> if ( expression ) ifBranch:MethodStatement else elseBranch:MethodStatement
While -> while ( expression ) inner:MethodStatement
for -> for ( init:singleLineStatement ; condition:expression ; increment:expression ) inner:MethodStatement
expression -> booleanOr
expression -> assign
assign -> booleanOr = expression
expression -> modifyAssign
modifyAssign -> booleanOr += expression
modifyAssign -> booleanOr -= expression
modifyAssign -> booleanOr *= expression
modifyAssign -> booleanOr /= expression
booleanOr -> booleanOr || booleanAnd
booleanOr -> booleanAnd
booleanAnd -> booleanAnd && bitwiseOr
booleanAnd -> bitwiseOr
bitwiseOr -> bitwiseOr | bitwiseAnd
bitwiseOr -> bitwiseAnd
bitwiseAnd -> bitwiseAnd & equals
bitwiseAnd -> equals
equals -> equals == comp
equals -> equals != comp
equals -> comp
comp -> comp < shift
comp -> comp <= shift
comp -> comp >= shift
comp -> comp > shift
comp -> shift
shift -> shift >> add
shift -> shift << add
shift -> add
add -> add + mul
add -> add - mul
add -> mul
mul -> mul * cast
mul -> mul % cast
mul -> mul / cast
mul -> cast
path -> ( path . )? word
cast -> ( type:word ) increment
cast -> + increment
cast -> - increment
cast -> increment
increment -> member ++
increment -> member --
increment -> ++ member
increment -> -- member
increment -> ! member
increment -> ~ member
increment -> member
member -> newInstance
member -> newArray
newInstance -> newKeyword type expressions:expressionParenthesis
newArray -> newKeyword type [ dimension:expression ]
member -> member . name:( word | classKeyword )
member -> ( expression )
member -> methodCall
member -> target:member [ index:expression ]
member -> rawExpression
methodCall -> member expressions:expressionParenthesis
expressionParenthesis -> ( expressions:expression[,] )
rawExpression -> variable
variable -> key:word
rawExpression -> key:number
rawExpression -> key:string
rawExpression -> key:booleanValue
rawExpression -> nullKeyword
rawExpression -> thisKeyword
